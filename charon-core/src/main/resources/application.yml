spring:
    application:
        name: CharonCore
    datasource:
        url: jdbc:postgresql://localhost:5433/charondb
        username: charon_core
        password: ${POSTGRES_PASSWORD_CHARONCORE}
        driver-class-name: org.postgresql.Driver
    jpa:
        properties[hibernate.default_schema]: charon_core
        hibernate:
            default_schema: charon_core
            ddl-auto: none
            # naming:
            #     # Include schema to qualify table names to avoid conflicts
            #     physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
            #     implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        show-sql: true
    flyway:
        url: jdbc:postgresql://localhost:5433/charondb
        user: charon_flyway
        password: ${POSTGRES_PASSWORD_FLYWAY}
        schemas: charon_core
        driver-class-name: org.postgresql.Driver
        # Manually set the database type to avoid the unsupported version check
        connect-retries: 3
        placeholders[flyway.database]: postgresql
    
    # kafka:
    #     bootstrap-servers: host.docker.internal:9092
    #     consumer:
    #         group-id: charon-consumer-group
    #         auto-offset-reset: earliest
    #         key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    #         value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    #     producer:
    #         key-serializer: org.apache.kafka.common.serialization.StringSerializer
    #         value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    #     properties:
    #         "[spring.json.trusted.packages]": "*"
        # listener:
        #     missing-topics-fatal: false


server:
    port: 7000

charondatasource:
    port: 7001